// stores/types/chat.ts

import { ChatMessage } from "../../lib/types/chat";

export interface Conversation {
  id: string;
  title: string;
  messages: ChatMessage[];
  userId?: string; // NEW: Track conversation owner (null for anonymous, string for authenticated users)
  createdAt: string; // ISO string for better serialization
  updatedAt: string; // ISO string for better serialization
  messageCount: number;
  totalTokens: number;
  lastModel?: string;
  isActive: boolean;
  lastMessagePreview?: string; // Last message content snippet for sidebar
  lastMessageTimestamp?: string; // ISO string timestamp of most recent message
}

export interface ChatError {
  message: string;
  code?: string;
  // Upstream OpenRouter error fields surfaced by API
  upstreamErrorCode?: number | string;
  upstreamErrorMessage?: string;
  suggestions?: string[];
  retryAfter?: number;
  timestamp?: string;
}

export interface ConversationErrorBanner {
  messageId: string; // The user message that failed
  message: string; // Error message to display
  code?: string; // Optional error code for retry semantics
  retryAfter?: number; // Optional retry-after seconds (e.g., 429)
  createdAt: string; // ISO string when the banner was created (session-only)
}

export interface ChatState {
  // Core state
  conversations: Conversation[];
  currentConversationId: string | null;
  isLoading: boolean;
  error: ChatError | null;
  isHydrated: boolean;

  // Sidebar pagination state for server-backed listings
  sidebarPaging?: {
    pageSize: number;
    loading: boolean;
    hasMore: boolean;
    nextCursor: { ts: string; id: string } | null;
    totalCount?: number;
    initialized: boolean;
  };

  // Ephemeral, session-only UI banners scoped per conversation (not persisted)
  conversationErrorBanners: Record<string, ConversationErrorBanner | undefined>;

  // Sync state
  isSyncing: boolean;
  lastSyncTime: string | null;
  syncError: string | null;
  syncInProgress: boolean;

  // Search state
  searchQuery: string;
  searchMode: 'inactive' | 'local' | 'server';
  searchResults: Conversation[];
  searchLoading: boolean;
  searchError: string | null;

  // Actions
  createConversation: (title?: string) => string;
  switchConversation: (id: string) => void;
  sendMessage: (content: string, model?: string, options?: { attachmentIds?: string[]; draftId?: string; webSearch?: boolean; webMaxResults?: number; reasoning?: { effort?: 'low' | 'medium' | 'high' } }) => Promise<void>;
  updateConversationTitle: (id: string, title: string, isAutoGenerated?: boolean) => Promise<void>;
  deleteConversation: (id: string, options?: { silent?: boolean }) => Promise<void>;
  clearAllConversations: () => Promise<void>;
  clearCurrentMessages: () => void;
  clearError: () => void;
  clearMessageError: (messageId: string) => void;
  // Ephemeral banner controls
  setConversationErrorBanner: (conversationId: string, banner: ConversationErrorBanner) => void;
  clearConversationErrorBanner: (conversationId: string) => void;
  clearAllConversationErrorBanners: () => void;
  closeErrorBannerAndDisableRetry: (conversationId: string) => void;
  retryLastMessage: () => Promise<void>;
  retryMessage: (
    messageId: string,
    content: string,
    model?: string,
    options?: { attachmentIds?: string[]; webSearch?: boolean; webMaxResults?: number; reasoning?: { effort?: 'low' | 'medium' | 'high' } }
  ) => Promise<void>; // Retry specific message with original options
  getContextMessages: (maxTokens: number) => ChatMessage[]; // Phase 3: Context selection

  // Sync actions
  syncConversations: () => Promise<void>;
  loadUserConversations: (userId: string) => Promise<void>;
  migrateAnonymousConversations: (userId: string) => Promise<void>;
  filterConversationsByUser: (userId: string | null) => void;

  // Sidebar listing actions
  loadInitialConversations?: () => Promise<void>;
  loadMoreConversations?: () => Promise<void>;
  // Lazy load full messages for a session when selected
  loadConversationMessages?: (id: string) => Promise<void>;

  // Search actions
  performLocalSearch: (query: string) => void;
  performServerSearch: (query: string) => Promise<void>;
  clearSearch: () => void;

  // Internal hydration handler
  _hasHydrated: () => void;
}

// Computed selectors
export interface ChatSelectors {
  getCurrentConversation: () => Conversation | null;
  getCurrentMessages: () => ChatMessage[];
  getConversationById: (id: string) => Conversation | null;
  getConversationCount: () => number;
  getTotalMessages: () => number;
  getRecentConversations: (limit?: number) => Conversation[];

  // Ephemeral image retention (Phase 3 streaming images): memory-only enforcement
  // Ensures large base64 image data is never persisted to localStorage and caps usage.
  // Not persisted; safe to call opportunistically after image additions.
  enforceImageRetention?: (conversationId: string) => void;
}
